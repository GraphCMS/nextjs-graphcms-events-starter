{"version":3,"file":"static/webpack/static/development/pages/index.js.e2c575bd15b5812bea04.hot-update.js","sources":["webpack:///./src/pages/index.js"],"sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport Sponsors from '../components/Sponsors';\n\nconst { GraphQLClient } = require('graphql-request');\n\nconst Wrapper = props => (\n  <section className=\"container mx-auto px-6 py-12 lg:py-20\" {...props} />\n);\n\nconst Home = ({ futureEvents, pastEvents, globalSponsors }) => {\n  const next = futureEvents[0];\n  return (\n    <React.Fragment>\n      <section\n        className=\"bg-cover bg-purple-800 pb-32 pt-8\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(107, 70, 193,0.85), rgba(107, 70, 193,0.5)), url(${next.image.url})`,\n          clipPath:\n            'polygon(0% 0%, 100% 0%, 100% 85%, 30% 85%, 30% 100%, 0% 85%)',\n        }}\n      >\n        <Wrapper>\n          <Link href={next.slug}>\n            <a>\n              <article>\n                <div className=\"z-10 relative px-4 self-center w-2/3\">\n                  <p className=\"text-white inline-block font-bold text-sm\">\n                    Up Next\n                  </p>\n                  <h1 className=\"text-6xl font-bold leading-tight text-white\">\n                    {next.title}\n                  </h1>\n                  <p className=\"text-xl font-bold pb-3 text-purple-200\">\n                    {next.venue && next.venue.name}\n                  </p>\n                </div>\n                <section className=\"flex flex-wrap\">\n                  <div\n                    className=\"w-full md:w-1/2 text-white bg-gray-900 p-6\"\n                    dangerouslySetInnerHTML={{ __html: next.description.html }}\n                  />\n                </section>\n              </article>\n            </a>\n          </Link>\n        </Wrapper>\n      </section>\n      <Wrapper>\n        <h2 className=\"text-purple-800 text-4xl md:text-6xl font-bold mb-6\">\n          Upcoming Events\n        </h2>\n        <section className=\"flex flex-wrap overflow-hidden -mx-2\">\n          {futureEvents &&\n            futureEvents.slice(1).map((event, index) => {\n              return (\n                <Link href=\"/[event-slug].js\" as={event.slug} key={index}>\n                  <a className=\"w-full md:w-1/2 px-2 mb-10\">\n                    <article>\n                      <img src={event.image ? event.image.url : ''} />\n                      <h1 className=\"font-bold text-gray-800 text-xl mb-2\">\n                        {event.title}\n                      </h1>\n                      <p>{event.venue ? event.venue.name : 'TBD'}</p>\n                    </article>\n                  </a>\n                </Link>\n              );\n            })}\n        </section>\n      </Wrapper>\n      <Sponsors sponsors={globalSponsors} />\n    </React.Fragment>\n  );\n};\n\nHome.getInitialProps = async ctx => {\n  const query = `\n  fragment assetInfo on Asset {\n    handle\n    width\n    height\n    url\n  }\n\n  fragment venueInfo on Venue {\n    id\n    name\n    location {\n      lat: latitude\n      lng: longitude\n    }\n    street\n    city\n    postcode\n    country\n  }\n\n  fragment speakerInfo on Speaker {\n    name\n    headline\n    photo {\n      ...assetInfo\n    }\n  }\n\n  fragment talkInfo on Talk {\n    id\n    title\n    speaker {\n      ...speakerInfo\n    }\n  }\n\n  fragment trackInfo on Track {\n    id\n    title\n    mc {\n      ...speakerInfo\n    }\n    timeSlots(orderBy: start_ASC) {\n      id\n      start\n      end\n      talk {\n        ...talkInfo\n      }\n      sessionBreak: break {\n        title\n      }\n    }\n  }\n\n  fragment EventInfo on Event {\n    id\n    title\n    slug\n    start\n    image {\n      ...assetInfo\n    }\n    description {\n      html\n    }\n    tracks {\n      ...trackInfo\n    }\n    sponsors {\n      name\n      url\n      logo {\n        ...assetInfo\n      }\n    }\n    venue {\n      ...venueInfo\n    }\n  }\n\n  query {\n      globalSponsors: sponsors(where: {\n        type: GLOBAL\n      }) {\n        name\n        url\n        logo {\n          ...assetInfo\n        }\n      }\n      events {\n        ...EventInfo\n      }\n  }\n`;\n\n  const graphQLClient = new GraphQLClient(process.env.GRAPHCMS_ENDPOINT, {\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      Authorization: `Bearer ${process.env.GATSBY_GRAPHCMS_TOKEN}`,\n    },\n  });\n\n  const request = await graphQLClient.request(query);\n\n  const { events, globalSponsors } = request;\n\n  if (events) {\n    let pastEvents = [];\n    let futureEvents = [];\n\n    const now = new Date();\n\n    const sortByStart = (a, b) => {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.start === b.start) return 0;\n    };\n\n    const sortBySpeaker = (a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      if (a.name === b.name) return 0;\n    };\n\n    events.forEach(payload => {\n      const { tracks, sponsors, venue, ...event } = payload;\n\n      if (new Date(event.start) < now) pastEvents.push(payload);\n      if (new Date(event.start) > now) futureEvents.push(payload);\n\n      const speakers = tracks.reduce((collector, currentTrack) => {\n        return [\n          ...collector,\n          ...currentTrack.timeSlots.map(timeSlot =>\n            timeSlot.talk ? timeSlot.talk.speaker : null\n          ),\n        ]\n          .filter(Boolean)\n          .sort(sortBySpeaker)\n          .reduce((collector, current) => {\n            if (collector.length) {\n              if (current.name === collector[collector.length - 1].name) {\n                return collector;\n              } else {\n                return [...collector, current];\n              }\n            } else {\n              return [...collector, current];\n            }\n          }, []);\n      }, []);\n    });\n\n    pastEvents = pastEvents ? pastEvents.sort(sortByStart) : [];\n    futureEvents = futureEvents ? futureEvents.sort(sortByStart) : [];\n\n    return { futureEvents, pastEvents, globalSponsors };\n  }\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkGA;AACA;AACA;AACA;AACA;AADA;AAHA;AAnGA;AAAA;AACA;AADA;AA2GA;AAEA;AACA;AA9GA;AAAA;AAAA;AAAA;AACA;AA+GA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA/JA;AAiKA;AAAA;AAAA;AAAA;AACA;AAlKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoKA;;;;;A","sourceRoot":""}