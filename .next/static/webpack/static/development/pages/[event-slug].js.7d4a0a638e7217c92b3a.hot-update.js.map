{"version":3,"file":"static/webpack/static/development/pages/[event-slug].js.7d4a0a638e7217c92b3a.hot-update.js","sources":["webpack:///./src/pages/[event-slug].js"],"sourcesContent":["import React from 'react';\nimport Image from 'graphcms-image';\n\nimport Speakers from '../components/Speakers';\nimport Venue from '../components/Venue';\nimport Schedule from '../components/Schedule';\nimport Sponsors from '../components/Sponsors';\n\nconst { GraphQLClient } = require('graphql-request');\n\nfunction EventPage({ event, speakers, venue, sponsors, tracks }) {\n  return (\n    <React.Fragment>\n      <section\n        className=\"bg-cover bg-purple-800 pb-32 pt-8\"\n        style={{\n          clipPath: 'polygon(0% 0%, 100% 0%, 100% 66%, 0% 100%)',\n        }}\n      >\n        <div className=\"container mx-auto px-6 py-12 lg:py-20\">\n          <div className=\"w-2/3\">\n            <h1 className=\"text-white text-4xl md:text-6xl font-bold mb-4 leading-tight\">\n              {event.title}\n            </h1>\n            <div\n              className=\"body-copy\"\n              dangerouslySetInnerHTML={{ __html: event.description.html }}\n            />\n          </div>\n        </div>\n      </section>\n      <Speakers speakers={speakers} />\n      <Schedule tracks={tracks} />\n      <Venue {...venue} image={event.image} />\n      <Sponsors sponsors={sponsors} event={event.title} />\n    </React.Fragment>\n  );\n}\n\nEventPage.getInitialProps = async ctx => {\n  const query = `\n    fragment assetInfo on Asset {\n      handle\n      width\n      height\n      url\n    }\n  \n    fragment venueInfo on Venue {\n      id\n      name\n      location {\n        lat: latitude\n        lng: longitude\n      }\n      street\n      city\n      postcode\n      country\n    }\n  \n    fragment speakerInfo on Speaker {\n      name\n      headline\n      photo {\n        ...assetInfo\n      }\n    }\n  \n    fragment talkInfo on Talk {\n      id\n      title\n      speaker {\n        ...speakerInfo\n      }\n    }\n  \n    fragment trackInfo on Track {\n      id\n      title\n      mc {\n        ...speakerInfo\n      }\n      timeSlots(orderBy: start_ASC) {\n        id\n        start\n        end\n        talk {\n          ...talkInfo\n        }\n        sessionBreak: break {\n          title\n        }\n      }\n    }\n  \n    fragment EventInfo on Event {\n      id\n      title\n      slug\n      start\n      image {\n        ...assetInfo\n      }\n      description {\n        html\n      }\n      tracks {\n        ...trackInfo\n      }\n      sponsors {\n        name\n        url\n        logo {\n          ...assetInfo\n        }\n      }\n      venue {\n        ...venueInfo\n      }\n    }\n  \n    query {\n        event(where:{\n            slug: \"${ctx.asPath.replace('/', '')}\"\n          }) {\n            ...EventInfo\n          }\n    }\n  `;\n\n  const graphQLClient = new GraphQLClient(process.env.GRAPHCMS_ENDPOINT, {\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      Authorization: `Bearer ${process.env.GATSBY_GRAPHCMS_TOKEN}`,\n    },\n  });\n\n  const request = await graphQLClient.request(query);\n  const { event } = request;\n\n  if (event) {\n    const { tracks, sponsors, venue, ...rest } = event;\n\n    const sortBySpeaker = (a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      if (a.name === b.name) return 0;\n    };\n\n    const speakers = tracks.reduce((collector, currentTrack) => {\n      return [\n        ...collector,\n        ...currentTrack.timeSlots.map(timeSlot =>\n          timeSlot.talk ? timeSlot.talk.speaker : null\n        ),\n      ]\n        .filter(Boolean)\n        .sort(sortBySpeaker)\n        .reduce((collector, current) => {\n          if (collector.length) {\n            if (current.name === collector[collector.length - 1].name) {\n              return collector;\n            } else {\n              return [...collector, current];\n            }\n          } else {\n            return [...collector, current];\n          }\n        }, []);\n    }, []);\n\n    return {\n      sponsors,\n      venue,\n      speakers,\n      tracks,\n      event: rest,\n    };\n  }\n};\n\nexport default EventPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2FA;AACA;AACA;AACA;AACA;AADA;AAHA;AA5FA;AAAA;AACA;AADA;AAoGA;AACA;AACA;AAtGA;AAAA;AAAA;AAAA;AACA;AAuGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApIA;AAuIA;AACA;AACA;AACA;AACA;AALA;AACA;AAvIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+IA;;;;;A","sourceRoot":""}